---
import Layout from "@/layouts/Layout.astro";
import { getEntry, getCollection } from "astro:content";
import BlogItem from "@/components/BlogItem.astro";
import SocialButtons from "@/layouts/SocialButtons.astro";
import Container from "@/components/Container.astro";

const { slug } = Astro.params;

if (slug === undefined) {
    throw new Error("Slug is required");
}
const entry = await getEntry("read", slug);

if (entry === undefined) {
    return Astro.redirect("/404");
}

const { Content } = await entry?.render();

const author = (await getCollection("author")).find(
    (a) => a.id === entry.data.author.id
)?.data as Author;

async function getRelatedArticles() {
    const allEntries = await getCollection("read");
    return Promise.all(
        allEntries
            .filter((e) => e.id !== entry?.id)
            .map(async (e) => ({
                item: e,
                author: (await getCollection("author")).find(
                    (a) => a.id === e.data.author.id
                )?.data as Author,
            }))
    );
}
---

<Layout title={`${entry.data.title} · Read · TEDxKMUTT`}>
    <main>
        <Container>
            <div class="mx-auto max-w-screen-md pt-8 space-y-8 mb-12">
                <img
                    transition:name={`${entry.slug}-thumbnail`}
                    src={entry.data.thumbnail.src}
                    alt={entry.data.thumbnail.alt}
                    class="object-contain w-full max-h-[70vh] bg-[#161616] border border-[#333] rounded-xl"
                />
                <h1
                    class="text-4xl font-bold"
                    transition:name={`${entry.slug}-title`}
                >
                    {entry.data.title}
                </h1>
                <!-- <div class="flex items-center">
            {
                entry.data.categories.map((category) => (
                    <span class="bg-[#46000C] mt-6 mb-2 text-red-600 rounded-full text-sm px-3 py-1 mr-2">
                        {category.toUpperCase()}
                    </span>
                ))
            }
            </div> -->
                <div class="content space-y-4">
                    <Content />
                </div>
                <div class="flex items-center">
                    <img
                        src={author.avatar.src}
                        class="w-8 h-8 object-cover rounded-full mr-3"
                        alt={`${author.name}'s avatar`}
                    />
                    <div class="text-sm">
                        <p>{author.name}</p>
                        <p class="text-xs text-gray-400">
                            {entry.data.pubDate.toDateString()}
                        </p>
                    </div>
                </div>

                <div class="mt-12">
                    <SocialButtons title={entry.data.title} />
                </div>
            </div>
            <div>
                <h1 class="text-3xl font-bold">Continue reading</h1>
                <div
                    class="grid mt-4 grid-cols-1 sm:grid-cols-2 md:grid-cols-3"
                >
                    {
                        getRelatedArticles().then((relatedArticles) =>
                            relatedArticles.map(({ item, author }) => (
                                <BlogItem blog={item} author={author} />
                            ))
                        )
                    }
                </div>
            </div>
        </Container>
    </main>

    <style lang="scss" is:global>
        .content {
            h1 {
                font-size: 2.25rem;
                font-weight: 700;
            }
            h2 {
                font-size: 1.875rem;
                font-weight: 700;
            }
            h3 {
                font-size: 1.5rem;
                font-weight: 700;
            }
            h4 {
                font-size: 1.25rem;
                font-weight: 700;
            }
            h5 {
                font-size: 1rem;
                font-weight: 700;
            }
            h6 {
                font-size: 0.875rem;
                font-weight: 700;
            }
            a {
                color: #eb0028;
                text-decoration: underline;
            }
            ul {
                list-style: disc;
                list-style-position: inside;
            }
            ol {
                list-style: decimal;
                list-style-position: inside;
                p {
                    display: inline-flex;
                }
            }
            blockquote {
                border-left: 4px solid #eb0028;
                padding: 1rem;
                margin: 1rem 0;
            }
            pre {
                background-color: #2c2c2c;
                color: #ffffff;
                padding: 1rem;
                border-radius: 0.5rem;
                overflow-x: auto;
            }
            code {
                background-color: #24292c;
                color: #ffffff;
                padding: 0.25rem 0.5rem;
                border-radius: 0.25rem;
            }
        }
    </style>
</Layout>
